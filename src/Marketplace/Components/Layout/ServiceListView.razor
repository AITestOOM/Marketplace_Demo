@using MudBlazor
@using Marketplace.Components.Pages
@using static Marketplace.Components.Pages.Home

<div class="service-list-view">
    <div class="d-flex align-center">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="@(() => OnBackClick.InvokeAsync())" Edge="Edge.Start" Class="mr-2" Color="Color.Primary" />
        <MudText Typo="Typo.h5">@Category.Name</MudText>
    </div>

    <div class="d-flex flex-wrap gap-2 my-4">
        @foreach (var filterText in Category?.Filters)
        {
            <MudButton Variant="@GetFilterVariant(filterText)"
                       OnClick="@(() => HandleFilterClick(filterText))"
                       Class="filter-btn">
                @filterText
            </MudButton>
        }
    </div>

    <div class="d-flex justify-space-between align-center mt-6 mb-2">
        <MudText Typo="Typo.h6">Navrhované služby</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.FilterList" />
    </div>

    <MudStack Spacing="3">
        @foreach (var offer in FilteredOffers)
        {
            <OfferCard Offer="@offer" OnOrderClick="@OnOrderClick" />
        }
    </MudStack>
</div>

<style>
    /* Your existing styles are correct and preserved */
    .service-card p {
        margin: 0;
        padding: 0;
        line-height: 1.4;
    }

    .filter-btn.mud-button-outlined {
        background: transparent !important;
        border: 1px solid #1D1E23 !important;
        color: #808080 !important;
        box-shadow: none;
    }

    .filter-btn.mud-button-filled {
        background: #1D1E23 !important;
        color: #FFFFFF !important;
    }

    .filter-btn {
        border-radius: 16px !important;
        font-family: 'Nimbus Sans D OT', sans-serif;
        font-size: 14px;
        text-transform: none;
        padding: 6px 16px;
    }

    .service-card {
        background-color: #1D1E23;
        border-radius: 3px;
    }

    .service-avatar {
        height: 56px;
        width: 56px;
        background-color: #D9D9D9;
        border-radius: 3px;
        flex-shrink: 0;
    }

    .offer-category-tag {
        width: fit-content;
        padding: 5px 10px;
        background: #2A2B31;
        border-radius: 10px;
        color: #FFFFFF;
        font-family: 'Nimbus Sans D OT', sans-serif;
        font-size: 12px;
        line-height: 1;
    }

    .service-title {
        font-family: 'Nimbus Sans D OT', sans-serif;
        font-weight: 700;
        font-size: 14px;
        color: #FFFFFF;
    }

    .service-provider {
        font-family: 'Nimbus Sans D OT', sans-serif;
        font-size: 12px;
        color: #808080;
    }

    .rating-icon {
        color: #0081EC;
        font-size: 12px;
    }

    .rating-text {
        font-family: 'Nimbus Sans D OT', sans-serif;
        font-weight: 700;
        font-size: 12px;
        color: #FFFFFF;
    }

    .rating-count {
        font-family: 'Nimbus Sans D OT', sans-serif;
        font-size: 12px;
        color: #808080;
    }

    .info-icon {
        color: #808080;
        font-size: 12px;
    }

    .info-text {
        font-family: 'Nimbus Sans D OT', sans-serif;
        font-size: 12px;
        color: #808080;
    }

    .price-text {
        font-family: 'Nimbus Sans D OT', sans-serif;
        font-weight: 700;
        font-size: 22px;
        color: #FFFFFF;
    }

    .order-link {
        font-family: 'Nimbus Sans D OT', sans-serif;
        font-size: 14px;
        color: #0081EC;
        text-decoration: none;
    }
</style>

@code {
    [Parameter] public List<Offer> Offers { get; set; } = new();
    [Parameter] public EventCallback OnBackClick { get; set; }
    [Parameter] public EventCallback<Offer> OnOrderClick { get; set; }

    [Parameter] public Category Category { get; set; }

    private List<string> _selectedFilters = new();

    private IEnumerable<Offer> FilteredOffers
    {
        get
        {
            if (_selectedFilters.Count == 0)
            {
                return Offers.Where(o => o.Category == Category.Name);
            }
            return Offers.Where(o => _selectedFilters.Contains(o.SubCategory));
        }
    }

    private void HandleFilterClick(string newFilter)
    {
        if (_selectedFilters.Contains(newFilter))
        {
            _selectedFilters.Remove(newFilter);
        }
        else
        {
            _selectedFilters.Add(newFilter);
        }
    }

    private Variant GetFilterVariant(string filterText)
    {
        return _selectedFilters.Contains(filterText) ? Variant.Filled : Variant.Outlined;
    }
}
