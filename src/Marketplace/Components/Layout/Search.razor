@using MudBlazor
@using static Marketplace.Components.Pages.Home
@using static Marketplace.Components.Layout.MainLayout
@using System.Timers

<div class="search-container-wrapper">
    <MudTextField T="string"
                  Placeholder="Hľadať služby a produkty..."
                  Variant="Variant.Outlined"
                  @bind-Value="searchTerm"
                  Immediate="true"
                  Adornment="Adornment.End"
                  AdornmentIcon="@AdornmentIcon"
                  OnAdornmentClick="OnAdornmentClick"
                  Class="search-input-field" />

    @if (string.IsNullOrEmpty(searchTerm))
    {
        @* Recent Searches Section *@
        <div class="recent-searches-section">
            <div class="recent-header">
                <h3 class="recent-title">Nedávne vyhľadávania</h3>
                <button class="clear-button" @onclick="ClearRecentSearches">Zmazať</button>
            </div>

            <ul class="recent-list">
                @foreach (var item in recentSearches)
                {
                    <li class="recent-list-item" @onclick="() => SelectSearchTerm(item)">
                        @item
                    </li>
                }
            </ul>
        </div>
    }
    else
    {
        @* Search Results Section *@
        <div class="search-results-section">
            <div class="d-flex justify-space-between align-center my-4">
                <MudText Typo="Typo.h6">Navrhované služby</MudText>
            </div>

            <MudTabs Elevation="0" Rounded="true" PanelClass="mt-4">
                <MudTabPanel Text="Služby">
                    <MudStack Spacing="2">
                        @foreach (var offer in FilteredOffers)
                        {
                            <OfferCard Offer="offer" OnOrderClick="@(() => OnOfferClick.InvokeAsync(offer))" />
                        }
                    </MudStack>
                </MudTabPanel>
                <MudTabPanel Text="Obchodníci">
                    <MudText>Obsah pre obchodníkov bude dostupný čoskoro.</MudText>
                </MudTabPanel>
            </MudTabs>
        </div>
    }
</div>

<style>
    .search-container-wrapper {
        background-color: #121315;
        color: #e0e0e0;
        padding: 16px;
        height: 100vh;
    }

    /* --- Search Bar Styles --- */
    .search-input-field .mud-input-control {
        background-color: #1D1E23;
    }
    .search-input-field .mud-input-root {
        padding-left: 16px !important;
    }
    .search-input-field .mud-input {
        color: #e0e0e0 !important;
    }
    .search-input-field .mud-input-slot.mud-input-slot-outlined {
        border-radius: 3px;
        border-color: #30343a !important;
    }
    .search-input-field.mud-input-focused fieldset {
        border-color: #0081EC !important;
    }
    
    .search-input-field .mud-input-adornment-end .mud-icon-root {
        color: #0081EC !important;
    }

    /* --- Recent & Results Sections --- */
    .recent-searches-section, .search-results-section {
        margin-top: 28px;
    }
    .recent-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }
    .recent-title {
        font-size: 1rem;
        font-weight: 600;
        color: #FFFFFF;
        margin: 0;
    }
    .clear-button {
        background: none;
        border: none;
        color: #0081EC;
        cursor: pointer;
        font-size: 0.9rem;
    }
    .recent-list {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }
    .recent-list-item {
        color: #a0a5ac;
        padding: 12px 4px;
        cursor: pointer;
        border-bottom: 1px solid #2A2B31;
    }

    /* --- Tabs Styles --- */
    .mud-tabs .mud-tab {
        color: #808080 !important;
        text-transform: none;
    }
    .mud-tabs .mud-tab.mud-tab-active {
        color: #FFFFFF !important;
    }
    .mud-tabs .mud-tabs-indicator {
        background-color: #0081EC !important;
    }
</style>

@code {
    [Parameter] public List<Offer> AllOffers { get; set; } = new();
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<Offer> OnOfferClick { get; set; }

    private string? searchTerm;

    // The logic to dynamically switch the icon is restored
    private string AdornmentIcon => Icons.Material.Filled.Close;

    private List<string> recentSearches = new List<string>
    {
        "kvapká mi kohútik",
        "potrebujem vymeniť zásuvku",
        "mám deravý výfuk",
        "potrebujem opraviť topánky"
    };

    private IEnumerable<Offer> FilteredOffers
    {
        get
        {
            if (string.IsNullOrEmpty(searchTerm))
            {
                return new List<Offer>();
            }
            return AllOffers.Where(o =>
                o.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                o.Provider.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                o.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                o.Category.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                o.NLquery.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                o.SubCategory.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            );
        }
    }

    private void OnAdornmentClick()
    {
        OnClose.InvokeAsync();
    }

    private void ClearRecentSearches()
    {
        recentSearches.Clear();
    }

    private void SelectSearchTerm(string term)
    {
        searchTerm = term;
    }
}
