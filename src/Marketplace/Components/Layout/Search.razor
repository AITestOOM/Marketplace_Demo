@using MudBlazor

<div class="search-container-wrapper">
    @* Section 1: Header with Back Button - This is now handled by the text field's icon *@
    <MudTextField T="string"
                  Placeholder="Hľadať služby a produkty..."
                  Variant="Variant.Outlined"
                  @bind-Value="searchTerm"
                  Immediate="true"
                  Adornment="Adornment.End"
                  AdornmentIcon="@AdornmentIcon"
                  OnAdornmentClick="OnAdornmentClick"
                  AdornmentColor="Color.Primary"
                  Class="search-input-field" />

    @* The rest of your component remains unchanged *@
    @if (recentSearches.Any())
    {
        <div class="recent-searches-section">
            <div class="recent-header">
                <h3 class="recent-title">Nedávne vyhľadávania</h3>
                <button class="clear-button" @onclick="ClearRecentSearches">Zmazať</button>
            </div>

            <ul class="recent-list">
                @foreach (var item in recentSearches)
                {
                    <li class="recent-list-item" @onclick="() => SelectSearchTerm(item)">
                        @item
                    </li>
                }
            </ul>
        </div>
    }

</div>

<style>
    .search-container-wrapper {
        background-color: #121315;
        color: #e0e0e0;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        padding: 16px;
        height: 100vh;
    }

    /* --- Search Bar Styles for MudTextField --- */
    .search-input-field .mud-input-control {
        background-color: #1D1E23;
    }

    .search-input-field .mud-input-root {
        padding-left: 16px !important;
    }

    .search-input-field .mud-input {
        color: #e0e0e0 !important;
    }

    .search-input-field .mud-input-slot.mud-input-slot-outlined {
        border-radius: 3px;
        border-color: #0081EC !important; /* Make the border blue by default */
    }

    .search-input-field fieldset {
        border-color: #0081EC !important; /* Ensure border color stays blue */
    }

    .search-input-field .mud-input-label.mud-input-label-animated {
        color: #808080 !important;
    }

    .search-input-field .mud-input-adornment-end .mud-icon-button .mud-icon-root {
        transition: color 0.2s ease-in-out;
    }

    /* --- Recent Searches Styles --- */
    .recent-searches-section {
        margin-top: 28px;
    }

    .recent-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .recent-title {
        font-size: 1rem;
        font-weight: 600;
        color: #FFFFFF;
        margin: 0;
    }

    .clear-button {
        background: none;
        border: none;
        color: #0081EC; /* Blue link color */
        cursor: pointer;
        font-size: 0.9rem;
        font-weight: 500;
        padding: 4px;
    }

    .recent-list {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    .recent-list-item {
        color: #a0a5ac;
        padding: 12px 4px;
        cursor: pointer;
        transition: color 0.2s ease-in-out;
        border-bottom: 1px solid #2A2B31;
    }

        .recent-list-item:hover {
            color: #ffffff;
        }
</style>

@code {
    [Parameter] public EventCallback OnClose { get; set; }

    private string? searchTerm;

    // This property now shows a Close icon when the input is empty
    private string AdornmentIcon => string.IsNullOrEmpty(searchTerm) ? Icons.Material.Filled.Close : Icons.Material.Filled.Search;

    private List<string> recentSearches = new List<string>
    {
        "vymena pneumatik",
        "kadernictvo",
        "oprava karoserie",
        "donaska potravin trnava"
    };

    private void OnAdornmentClick()
    {
        // If the search term is empty, the icon is "Close", so we invoke the close action.
        if (string.IsNullOrEmpty(searchTerm))
        {
            OnClose.InvokeAsync();
        }
        else
        {
            // If there is text, the icon is "Search". We can add search logic here later.
            Console.WriteLine($"Searching for: {searchTerm}");
        }
    }

    private void ClearRecentSearches()
    {
        recentSearches.Clear();
    }

    private void SelectSearchTerm(string term)
    {
        searchTerm = term;
    }
}
